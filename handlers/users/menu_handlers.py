from typing import Union
import datetime

from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery, Message
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from keyboards.inline.menu_keyboards import *
from CurrencyBot.utils.db_api import db
from CurrencyBot.utils import currencies
from loader import dp, bot


class CurrencyPair(StatesGroup):
    waiting_start = State()
    waiting_for_add_currency = State()
    waiting_for_add_currency_price = State()


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /menu
@dp.message_handler(Command("menu"))
async def show_menu(message: types.Message):
    message.chat.type
    # –í—ã–ø–æ–ª–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await list_menu(message)


# –¢–∞ —Å–∞–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –û–Ω–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ CallbackQuery, —Ç–∞–∫ –∏ Message
# –ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, –º—ã –≤ –Ω–µ–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - category, subcategory, item_id,
# –ü–æ—ç—Ç–æ–º—É –ª–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ **kwargs
async def list_menu(message: Union[CallbackQuery, Message], **kwargs):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–≥–¥–µ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    markup = await menu_keyboard(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞ —Ç–∏–ø –∞–ø–¥–µ–π—Ç–∞. –ï—Å–ª–∏ Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(message, Message):
        await message.answer("üóÇMenu", reply_markup=markup)

    # –ï—Å–ª–∏ CallbackQuery - –∏–∑–º–µ–Ω—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif isinstance(message, CallbackQuery):
        call = message
        # await call.message.edit_reply_markup(markup)
        await call.message.edit_text(text="üóÇMenu", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def list_notification(callback: CallbackQuery, **kwargs):
    # check info users
    user_id = callback.from_user.id
    str_result = ""
    user_status = [db.select_data_table_db("CICurrencyBot", "user_notification", user_id, "status"),
                   db.select_data_table_db("CICurrencyBot", "user_notification", user_id, "call_phone"),
                   db.select_data_table_db("CICurrencyBot", "user_notification", user_id, "message")]
    for i in user_status:
        str_result += str(i[0][0])

    markup = await notification_keyboard(str_result)

    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await callback.message.edit_text(text="üí°List Notifications", reply_markup=markup)


async def manage_notification(callback: CallbackQuery, _chosen, **kwargs):
    user_id = callback.from_user.id

    if _chosen != "off":
        if _chosen == "turn_on":
            db.update_user_notification_db("CICurrencyBot", "user_notification", user_id, "status", 1)
            db.update_user_notification_db("CICurrencyBot", "user_notification", user_id, "call_phone", 1)
            db.update_user_notification_db("CICurrencyBot", "user_notification", user_id, "message", 1)
        elif _chosen == "turn_off":
            db.update_user_notification_db("CICurrencyBot", "user_notification", user_id, "status", 0)
            db.update_user_notification_db("CICurrencyBot", "user_notification", user_id, "call_phone", 0)
            db.update_user_notification_db("CICurrencyBot", "user_notification", user_id, "message", 0)
        elif _chosen == "call_phone_off":
            db.update_user_notification_db("CICurrencyBot", "user_notification", user_id, "call_phone", 0)
        elif _chosen == "call_phone_on":
            db.update_user_notification_db("CICurrencyBot", "user_notification", user_id, "call_phone", 1)
        elif _chosen == "message_off":
            db.update_user_notification_db("CICurrencyBot", "user_notification", user_id, "message", 0)
        elif _chosen == "message_on":
            db.update_user_notification_db("CICurrencyBot", "user_notification", user_id, "message", 1)

        await list_notification(callback)
    else:
        await bot.answer_callback_query(
            callback_query_id=callback.id,
            text="Please initial turn on notification!",
            show_alert=True
        )


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –ù–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ü–µ–Ω–æ–π —Ç–æ–≤–∞—Ä–∞, –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def list_currency(callback: CallbackQuery, **kwargs):
    user_id = callback.from_user.id
    markup = await currency_keyboard()

    currency = db.select_data_table_db("CICurrencyBot", "user_currency", user_id, "currency, price, date")
    result = ""
    for i in currency:
        text = "<b>Currency: " + str(i[0]) + " by price: " + str(i[1]) + " from date: " + str(i[2]) + "\n\n</b>"
        result += text

    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await callback.message.edit_text(text=f"üí∏List Currency\n{result}", reply_markup=markup)


async def manage_currency(callback: CallbackQuery, _chosen, **kwargs):
    user_id = callback.from_user.id

    if _chosen == "add_currency":
        await callback.message.answer(
            "<b>Enter this command '/add' or use keyboard lower</b>")
        await CurrencyPair.waiting_start.set()

    elif _chosen == "del_currency_check":
        currency = db.select_data_table_db("CICurrencyBot", "user_currency", user_id, "id, currency, price")
        result = []

        for i in currency:
            text = str(i[1]) + " price: " + str(i[2])
            result.append({"id": i[0], "currency": text})

        markup = await del_currency_keyboard(result)
        await callback.message.edit_text(text="<b>üóëPlease select any currency pair for delete</b>",
                                         reply_markup=markup)


async def del_currency_check(callback: CallbackQuery, _chosen, **kwargs):
    markup = await del_currency_check_keyboard(_chosen)

    await callback.message.edit_text(text="<b>üóëYou definitely want delete currency</b>",
                                     reply_markup=markup)


async def delete_currency(callback: CallbackQuery, _chosen, _values, **kwargs):
    if _chosen == "yes":
        db.delete_currency_db("CICurrencyBot", "user_currency", f"id = '{_values}'", "delete_records")
        # await bot.answer_callback_query(
        #     callback_query_id=callback.id,
        #     text="Currency pair delete successful!",
        #     show_alert=True
        # )

    await manage_currency(callback, "del_currency_check")


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    # logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    # await message.reply(f'<b>You state: {current_state} is finish</b>')
    await message.reply(f'<b>You got out</b>')


@dp.message_handler(Command("add"), state=CurrencyPair.waiting_start)
async def add_currency_step_1(message: types.Message):
    await message.answer("<b>Please enter any currency pair from Binance format (BTCUSDT)\n (For quit input, "
                         "send 'Cancel')</b>")
    await CurrencyPair.next()


@dp.message_handler(state=CurrencyPair.waiting_for_add_currency, content_types=types.ContentTypes.TEXT)
async def add_currency_step_2(message: types.Message, state: FSMContext):
    if not await currencies.available_currency(str(message.text).upper()):
        await message.reply("<b>Please enter valid currency pair:! \n(For quit input, send 'Cancel')</b>")
        return

    await message.reply("<b>Please enter price currency:! \n(For quit input, send 'Cancel')</b>")
    await state.update_data(currency=str(message.text).upper())
    await CurrencyPair.next()


@dp.message_handler(state=CurrencyPair.waiting_for_add_currency_price, content_types=types.ContentTypes.TEXT)
async def add_currency_step_3(message: types.Message, state: FSMContext):
    if not currencies.is_number(message.text):
        await message.reply("<b>Please enter valid currency price:! \n(For quit input, send 'Cancel')</b>")
        return

    await state.update_data(currency_price=message.text)
    data = await state.get_data()
    # await CurrencyPair.next()
    await state.finish()

    user_id = message.from_user.id
    currency = db.select_data_table_db("CICurrencyBot", "user_currency", user_id, "currency, price")
    current_currency = data['currency']
    current_price = float(message.text)
    currency_exist = False
    now_time = datetime.datetime.now()
    finally_message = f"<b>Currency pair: added successful by price: {current_price}</b>"

    for cur in currency:
        currency = cur[0]
        price = cur[1]
        if current_currency == currency:
            if current_price == price:
                currency_exist = True
                finally_message = f"<b>Currency pair: {current_currency} is exist by price: {current_price}</b>"

    if not currency_exist:
        db.insert_currency_into_db("CICurrencyBot", "user_currency", data['currency'], current_price,
                                   user_id, now_time)

    await message.answer(finally_message)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç —É–∂–µ –∫–Ω–æ–ø–∫—É –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
async def show_portfolio(callback: CallbackQuery, **kwargs):
    user_id = callback.from_user.id
    markup = await portfolio_keyboard(user_id)
    print(user_id)

    # –ë–µ—Ä–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    await callback.message.edit_text(text="„ÄΩPortfolio", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ–π –º–µ–Ω—é—à–∫–µ
@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: CallbackQuery, callback_data: dict):
    """

    :param call: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ CallbackQuery, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    :param callback_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_level = callback_data.get("level")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ù–ï –í–°–ï–ì–î–ê - –º–æ–∂–µ—Ç –±—ã—Ç—å 0)
    chosen = callback_data.get("chosen")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ù–ï –í–°–ï–ì–î–ê - –º–æ–∂–µ—Ç –±—ã—Ç—å 0)
    values = callback_data.get("values")

    # –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º "—É—Ä–æ–≤–Ω–∏" –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    levels = {
        "menu": list_menu,  # –û—Ç–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "notifications": list_notification,  # –û—Ç–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "currency": list_currency,  # –û—Ç–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        "portfolio": show_portfolio,  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä

        "manage_notifications": manage_notification,  # –ò–∑–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        "manage_currency": manage_currency,
        "del_currency_check": del_currency_check,
        "del_currency": delete_currency
    }

    # –ó–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    current_level_function = levels[current_level]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    await current_level_function(
        call,
        _chosen=chosen,
        _values=values
    )
